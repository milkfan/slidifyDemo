33 ^ 3
33 ^ 2
29 ^ 2
35 ^ 2
1 ^ 2
2 ^ 2
3 ^ 2
262144 / 32768
sqrt(32768)
2^31-1
149050914*2
149050914……2
149050914^2
1359142020/149050914
2^31-1
1359142020/149050914
e^2
math.e^2
help(e)
import math
2.12^2
ans*2
1969057606^2
1969057606^2 mod 2^32-1
1969057606^2 % 2^32-1
(1969057606^2) % (2^32-1)
(1969057606^2) / (2^32-1)
(1969057606^2) / (2^31-1)
(1969057606^2) / (2^31-1) - 1805456289*(2^31-1)
(1969057606^2) / (2^31-1) - 1805456288*(2^31-1)
(1969057606^2) - 1805456289*(2^31-1)
(1969057606^2) - 1805456288*(2^31-1)
(1969057606^2) / (2^32-1)
(1969057606^2) - 902728144*(2^32-1)
1969057606+87672612
1969057606- 2^31-1
-178426042/2
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.13)
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z*2+ 100
mySqrt<-sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1, 2, 3, 4)+c(0,10)
c(1, 2, 3, 4)+c(0,10,100)
1:20
pi:10
15:1
exit()
exit
help
`:`
?`:`
bye()
setwd("C:\Users\Administrator\Desktop\Ali")
## Put comments here that give an overall description of what your
## functions do
## creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinvert <- function(invert) m <<- invert
getinvert <- function() m
list(set = set, get = get,
setinvert = setinvert,
getinvert = getinvert)
}
## computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinvert()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinvert(m)
m
}
## test
instance <- matrix(1:9, 3, 3)
cacheSolve(instance)
cacheSolve(instance)
cacheSolve(instance)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v<-c(1:9)
cachemean(v)
class(v)
class(instance)
v<-c(1:9)
makeVector(v)
cachemean(v)
a<-makeVector(v)
a<-cachemean(v)
b<-cachemean(a)
b
b<-cachemean(a)
## test
instance <- matrix(1:9, 3, 3)
m<-makeCacheMatrix(instance)
cacheSolve(m)
cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinvert <- function(invert) m <<- invert
getinvert <- function() m
list(set = set, get = get,
setinvert = setinvert,
getinvert = getinvert)
}
## computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinvert()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinvert(m)
m
}
## test
instance <- matrix(1:9, 3, 3)
m<-makeCacheMatrix(instance)
cacheSolve(m)
cacheSolve(m)
m$get
m$get()
a<-m$get()
solve(a)
## test
instance <- matrix(1:4,2)
m<-makeCacheMatrix(instance)
cacheSolve(m)
cacheSolve(m)
85/(85+890)
a = [0.001, 0.007, 0.065, 0.508, 4.679, 41.150, 375.628, 3330.581]
a = c(0.001, 0.007, 0.065, 0.508, 4.679, 41.150, 375.628, 3330.581)
sum = 0;
for(i in c(2:length(a))){}
for(i in c(2:length(a))){sum+=log((a[i]/a[i-1])}
for(i in c(2:length(a))){sum+=log(2,(a[i]/a[i-1]))}
log(2)
log(2,4)
log(2,8)
for(i in c(2:length(a))){sum+=log((a[i]/a[i-1]), 2)}
for(i in c(2:length(a))){sum=sum+log((a[i]/a[i-1]), 2)}
sum
sum = 0
for(i in c(2:length(a))){sum=sum+log((a[i]/a[i-1]), 2)}
sum
sum/(length(a)-1)
(0.68/10)^0.5 + (0.6/10)^0.5
((0.68/10)^0.5 + (0.6/10)^0.5)/2 * c(-1,1)*1.96 -2
2/1.96
*3
ans*3
qt(0.95,9)
qt(0.95,100)
qt(0.975,100)
qt(0.975,100000)
qt(0.975,8)
2/2.3
*3
qt(0.975, 18)*(-1,1)*(0.64^0.5)*(0.2^0.5) -2
qt(0.975, 18)*c(-1,1)*(0.64^0.5)*(0.2^0.5) -2
qt(0.975, 198)*c(-1,1)*(2.125^0.5)*(0.02^0.5) -2
qt(0.95, 16)*c(-1,1)*(0.5*(1.5^2 + 1.8^2))^0.5)*(2*(1/9)^0.5) -4
qt(0.95, 16)*c(-1,1)*(0.5*(1.5^2 + 1.8^2)^0.5)*(2*(1/9)^0.5) -4
qt(0.975,8)*c(-1,1)*30 + 1100
2/qt(0.975, 8)*3
qt(0.975,8)*c(-1,1)*10 + 1100
setwd("D:\\Rworkspace\\Statistical Inference")
setwd("D:\\Rworkspace\\slides")
library(slidify)
setwd("D:\\Rworkspace\\slides\\first_deck")
slidify("index.Rmd")
browseURL
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("C:/Users/Administrator/Desktop/CourseraMaterial/Rcourse/09_DevelopingDataProducts/slidify")
slidify("index.Rmd")
setwd("D:\\Rworkspace\\slides\\first_deck")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("D:\\Rworkspace\\slides\\first_deck")
setwd("D:\\Rworkspace\\slides\\first_deck")
slidify("index.Rmd")
setwd("D:\\Rworkspace\\slides\\first_deck")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("D:\\Rworkspace\\onboard")
author("theCleanCoder")
setwd("D:\\Rworkspace\\onboard\\theCleanCode")
setwd("D:\\Rworkspace\\onboard\\theCleanCoder")
knit('index.Rmd', encoding='UTF-8')
require(knitr)
require(knitr)
knit('index.Rmd', encoding='UTF-8')
slidify('index.md', knit_deck=FALSE)
slidify('index.md')
knit('index.Rmd', encoding='UTF-8')
slidify('index.md')
knit('index.Rmd', encoding='UTF-8')
slidify('index.md', knit_deck=FALSE)
publish_github('milkfan','slidifyDemo')
